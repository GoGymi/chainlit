#!/bin/bash

# Configuration - adjust these variables for your setup
REPO_URL="https://github.com/GoGymi/chainlit.git"
WHEEL_URL="https://github.com/GoGymi/chainlit/releases/download/2.0rc0.dev3%2Bgogymi/chainlit-2.0rc0.dev3+gogymi-cp310-cp310-manylinux_2_40_x86_64.whl"
WHEEL_VERSION="2.0rc0.dev3+gogymi" # Change this when you create new releases

# ===== LOCAL BUILD SCRIPT (run once on your development machine) =====
function build_wheel() {
  echo "üî® Building Chainlit wheel package locally..."

  # Clean any previous build attempts if they exist
  if [ -d "chainlit" ]; then
    echo "üìÇ Cleaning previous build directory..."
    rm -rf chainlit
  fi

  # Clone your fork
  echo "üîÑ Cloning repository from $REPO_URL..."
  git clone --depth 1 "$REPO_URL"
  cd chainlit

  # Get the current commit hash for reference
  COMMIT_HASH=$(git rev-parse HEAD)
  echo "üìå Building from commit: $COMMIT_HASH"

  # Install JS dependencies
  #echo "üì¶ Installing frontend dependencies..."
  #pnpm install

  # Build frontend components with parallelization
  #echo "üèóÔ∏è Building frontend components..."
  #(cd libs/react-client && pnpm run build) &
  #react_pid=$!
  #wait $react_pid

  #(cd libs/copilot && pnpm run build) &
  #copilot_pid=$!
  #wait $copilot_pid

  # We don't use the frontend, just the copilot
  #(cd frontend && pnpm run build) &
  #frontend_pid=$!
  #wait $frontend_pid

  # Build the Python package
  echo "üì¶ Building Python wheel package..."
  cd backend
  poetry build

  # Get the wheel filename
  WHEEL_FILE=$(ls -1 dist/*.whl | head -1)
  WHEEL_FILENAME=$(basename "$WHEEL_FILE")

  echo "üì¶ Installing Chainlit wheel from: $WHEEL_FILE"
  cd ../../
  uv remove chainlit
  uv add "chainlit/backend/$WHEEL_FILE"
  #poetry remove chainlit
  #poetry add "chainlit/backend/$WHEEL_FILE"

  echo "‚úÖ Wheel package built successfully!"
  echo "üìÅ Wheel file: chainlit/backend/$WHEEL_FILE"
  echo ""
  echo "üöÄ Now:"
  echo "1. Upload $WHEEL_FILENAME to GitHub releases"
  echo "2. Update the WHEEL_URL variable in this script to point to your new release"
  echo "3. Update the WHEEL_VERSION variable to match your new version"
}

# ===== REPLIT DEPLOYMENT SCRIPT =====
function deploy_wheel() {
  echo "üöÄ Installing pre-built Chainlit wheel on Replit..."

  # Check if we're running on Replit
  if [ -n "$REPL_ID" ]; then
    echo "‚úÖ Detected Replit environment"
  else
    echo "‚ö†Ô∏è Not running on Replit, but continuing anyway..."
  fi

  # Install the wheel package directly
  echo "üì¶ Installing Chainlit wheel from: $WHEEL_URL"
  uv add "$WHEEL_URL"
  #uv pip install "$WHEEL_URL"

  # Verify installation
  INSTALLED_VERSION=$(pip show chainlit | grep Version | cut -d ' ' -f 2)
  if [ "$INSTALLED_VERSION" = "$WHEEL_VERSION" ]; then
    echo "‚úÖ Chainlit v$INSTALLED_VERSION installed successfully!"
  else
    echo "‚ö†Ô∏è Installed version ($INSTALLED_VERSION) doesn't match expected version ($WHEEL_VERSION)"
    echo "   Installation may have failed or used a different version."
    echo "   Callum also needs to figure out how to change the internal Chainlit version, so this is not a real problem."
  fi
}

# Show help message
function show_help() {
  echo "Chainlit Build/Deploy Script"
  echo ""
  echo "Usage:"
  echo "  $0              - Default: Deploy pre-built Chainlit wheel (for Replit)"
  echo "  $0 --build      - Build Chainlit wheel package locally"
  echo "  $0 --help       - Show this help message"
  echo ""
  echo "Environment Variables:"
  echo "  WHEEL_URL       - Override the default wheel URL"
  echo ""
}

# Check for environment variable overrides
if [ -n "$WHEEL_URL_OVERRIDE" ]; then
  WHEEL_URL="$WHEEL_URL_OVERRIDE"
  echo "üîÑ Using custom wheel URL: $WHEEL_URL"
fi

# Parse command line arguments
case "$1" in
  --build)
    build_wheel
    ;;
  --help)
    show_help
    ;;
  *)
    # Default to deployment script for Replit
    deploy_wheel
    ;;
esac